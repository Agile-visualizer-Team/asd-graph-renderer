{"C:\\Users\\saler\\Desktop\\asd-graph-renderer\\src\\parser.ts":{"path":"C:\\Users\\saler\\Desktop\\asd-graph-renderer\\src\\parser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"4":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"5":{"start":{"line":8,"column":17},"end":{"line":8,"column":36}},"6":{"start":{"line":9,"column":28},"end":{"line":9,"column":58}},"7":{"start":{"line":10,"column":17},"end":{"line":10,"column":51}},"8":{"start":{"line":13,"column":8},"end":{"line":13,"column":49}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":54}},"10":{"start":{"line":15,"column":8},"end":{"line":20,"column":9}},"11":{"start":{"line":16,"column":12},"end":{"line":16,"column":85}},"12":{"start":{"line":17,"column":26},"end":{"line":17,"column":78}},"13":{"start":{"line":18,"column":25},"end":{"line":18,"column":57}},"14":{"start":{"line":19,"column":12},"end":{"line":19,"column":80}},"15":{"start":{"line":21,"column":8},"end":{"line":21,"column":33}},"16":{"start":{"line":22,"column":8},"end":{"line":22,"column":100}},"17":{"start":{"line":23,"column":8},"end":{"line":23,"column":99}},"18":{"start":{"line":24,"column":8},"end":{"line":29,"column":9}},"19":{"start":{"line":25,"column":12},"end":{"line":25,"column":87}},"20":{"start":{"line":26,"column":26},"end":{"line":26,"column":80}},"21":{"start":{"line":27,"column":25},"end":{"line":27,"column":60}},"22":{"start":{"line":28,"column":12},"end":{"line":28,"column":84}},"23":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"24":{"start":{"line":31,"column":12},"end":{"line":31,"column":52}},"25":{"start":{"line":33,"column":8},"end":{"line":33,"column":37}},"26":{"start":{"line":40,"column":22},"end":{"line":42,"column":10}},"27":{"start":{"line":41,"column":12},"end":{"line":41,"column":45}},"28":{"start":{"line":43,"column":8},"end":{"line":44,"column":104}},"29":{"start":{"line":44,"column":12},"end":{"line":44,"column":104}},"30":{"start":{"line":81,"column":26},"end":{"line":81,"column":72}},"31":{"start":{"line":81,"column":88},"end":{"line":81,"column":124}},"32":{"start":{"line":82,"column":26},"end":{"line":82,"column":71}},"33":{"start":{"line":82,"column":87},"end":{"line":82,"column":122}},"34":{"start":{"line":83,"column":21},"end":{"line":83,"column":23}},"35":{"start":{"line":84,"column":8},"end":{"line":96,"column":11}},"36":{"start":{"line":85,"column":22},"end":{"line":85,"column":24}},"37":{"start":{"line":86,"column":22},"end":{"line":86,"column":24}},"38":{"start":{"line":87,"column":12},"end":{"line":92,"column":15}},"39":{"start":{"line":88,"column":16},"end":{"line":91,"column":33}},"40":{"start":{"line":89,"column":20},"end":{"line":89,"column":33}},"41":{"start":{"line":90,"column":21},"end":{"line":91,"column":33}},"42":{"start":{"line":91,"column":20},"end":{"line":91,"column":33}},"43":{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},"44":{"start":{"line":94,"column":16},"end":{"line":94,"column":55}},"45":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"46":{"start":{"line":98,"column":12},"end":{"line":98,"column":84}},"47":{"start":{"line":100,"column":8},"end":{"line":100,"column":22}},"48":{"start":{"line":107,"column":27},"end":{"line":107,"column":58}},"49":{"start":{"line":108,"column":31},"end":{"line":108,"column":90}},"50":{"start":{"line":109,"column":31},"end":{"line":109,"column":89}},"51":{"start":{"line":110,"column":8},"end":{"line":121,"column":11}},"52":{"start":{"line":111,"column":26},"end":{"line":113,"column":14}},"53":{"start":{"line":112,"column":16},"end":{"line":112,"column":62}},"54":{"start":{"line":114,"column":26},"end":{"line":116,"column":14}},"55":{"start":{"line":115,"column":16},"end":{"line":115,"column":62}},"56":{"start":{"line":117,"column":12},"end":{"line":120,"column":14}},"57":{"start":{"line":124,"column":8},"end":{"line":127,"column":10}},"58":{"start":{"line":130,"column":8},"end":{"line":135,"column":10}},"59":{"start":{"line":138,"column":23},"end":{"line":138,"column":66}},"60":{"start":{"line":139,"column":26},"end":{"line":139,"column":53}},"61":{"start":{"line":140,"column":8},"end":{"line":142,"column":67}},"62":{"start":{"line":145,"column":23},"end":{"line":145,"column":66}},"63":{"start":{"line":146,"column":26},"end":{"line":146,"column":53}},"64":{"start":{"line":147,"column":24},"end":{"line":147,"column":49}},"65":{"start":{"line":148,"column":28},"end":{"line":148,"column":92}},"66":{"start":{"line":149,"column":8},"end":{"line":151,"column":110}},"67":{"start":{"line":154,"column":0},"end":{"line":154,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":38},"end":{"line":34,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":57},"end":{"line":45,"column":5}},"line":38},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":48},"end":{"line":40,"column":49}},"loc":{"start":{"line":40,"column":57},"end":{"line":42,"column":9}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":44},"end":{"line":101,"column":5}},"line":80},"5":{"name":"(anonymous_5)","decl":{"start":{"line":84,"column":32},"end":{"line":84,"column":33}},"loc":{"start":{"line":84,"column":45},"end":{"line":96,"column":9}},"line":84},"6":{"name":"(anonymous_6)","decl":{"start":{"line":87,"column":33},"end":{"line":87,"column":34}},"loc":{"start":{"line":87,"column":43},"end":{"line":92,"column":13}},"line":87},"7":{"name":"(anonymous_7)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":25},"end":{"line":122,"column":5}},"line":106},"8":{"name":"(anonymous_8)","decl":{"start":{"line":110,"column":30},"end":{"line":110,"column":31}},"loc":{"start":{"line":110,"column":38},"end":{"line":121,"column":9}},"line":110},"9":{"name":"(anonymous_9)","decl":{"start":{"line":111,"column":39},"end":{"line":111,"column":40}},"loc":{"start":{"line":111,"column":49},"end":{"line":113,"column":13}},"line":111},"10":{"name":"(anonymous_10)","decl":{"start":{"line":114,"column":38},"end":{"line":114,"column":39}},"loc":{"start":{"line":114,"column":48},"end":{"line":116,"column":13}},"line":114},"11":{"name":"(anonymous_11)","decl":{"start":{"line":123,"column":4},"end":{"line":123,"column":5}},"loc":{"start":{"line":123,"column":34},"end":{"line":128,"column":5}},"line":123},"12":{"name":"(anonymous_12)","decl":{"start":{"line":129,"column":4},"end":{"line":129,"column":5}},"loc":{"start":{"line":129,"column":34},"end":{"line":136,"column":5}},"line":129},"13":{"name":"(anonymous_13)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":33},"end":{"line":143,"column":5}},"line":137},"14":{"name":"(anonymous_14)","decl":{"start":{"line":144,"column":4},"end":{"line":144,"column":5}},"loc":{"start":{"line":144,"column":33},"end":{"line":152,"column":5}},"line":144}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":15,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":20,"column":9}},{"start":{"line":15,"column":8},"end":{"line":20,"column":9}}],"line":15},"4":{"loc":{"start":{"line":18,"column":25},"end":{"line":18,"column":57}},"type":"binary-expr","locations":[{"start":{"line":18,"column":25},"end":{"line":18,"column":43}},{"start":{"line":18,"column":47},"end":{"line":18,"column":57}}],"line":18},"5":{"loc":{"start":{"line":24,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":29,"column":9}},{"start":{"line":24,"column":8},"end":{"line":29,"column":9}}],"line":24},"6":{"loc":{"start":{"line":27,"column":25},"end":{"line":27,"column":60}},"type":"binary-expr","locations":[{"start":{"line":27,"column":25},"end":{"line":27,"column":43}},{"start":{"line":27,"column":47},"end":{"line":27,"column":60}}],"line":27},"7":{"loc":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},{"start":{"line":30,"column":8},"end":{"line":32,"column":9}}],"line":30},"8":{"loc":{"start":{"line":43,"column":8},"end":{"line":44,"column":104}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":44,"column":104}},{"start":{"line":43,"column":8},"end":{"line":44,"column":104}}],"line":43},"9":{"loc":{"start":{"line":80,"column":25},"end":{"line":80,"column":42}},"type":"default-arg","locations":[{"start":{"line":80,"column":38},"end":{"line":80,"column":42}}],"line":80},"10":{"loc":{"start":{"line":88,"column":16},"end":{"line":91,"column":33}},"type":"if","locations":[{"start":{"line":88,"column":16},"end":{"line":91,"column":33}},{"start":{"line":88,"column":16},"end":{"line":91,"column":33}}],"line":88},"11":{"loc":{"start":{"line":88,"column":20},"end":{"line":88,"column":81}},"type":"binary-expr","locations":[{"start":{"line":88,"column":20},"end":{"line":88,"column":40}},{"start":{"line":88,"column":44},"end":{"line":88,"column":81}}],"line":88},"12":{"loc":{"start":{"line":90,"column":21},"end":{"line":91,"column":33}},"type":"if","locations":[{"start":{"line":90,"column":21},"end":{"line":91,"column":33}},{"start":{"line":90,"column":21},"end":{"line":91,"column":33}}],"line":90},"13":{"loc":{"start":{"line":90,"column":25},"end":{"line":90,"column":86}},"type":"binary-expr","locations":[{"start":{"line":90,"column":25},"end":{"line":90,"column":45}},{"start":{"line":90,"column":49},"end":{"line":90,"column":86}}],"line":90},"14":{"loc":{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},"type":"if","locations":[{"start":{"line":93,"column":12},"end":{"line":95,"column":13}},{"start":{"line":93,"column":12},"end":{"line":95,"column":13}}],"line":93},"15":{"loc":{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},"type":"if","locations":[{"start":{"line":97,"column":8},"end":{"line":99,"column":9}},{"start":{"line":97,"column":8},"end":{"line":99,"column":9}}],"line":97},"16":{"loc":{"start":{"line":140,"column":15},"end":{"line":142,"column":66}},"type":"cond-expr","locations":[{"start":{"line":140,"column":48},"end":{"line":140,"column":138}},{"start":{"line":141,"column":12},"end":{"line":142,"column":66}}],"line":140},"17":{"loc":{"start":{"line":141,"column":12},"end":{"line":142,"column":66}},"type":"cond-expr","locations":[{"start":{"line":141,"column":39},"end":{"line":141,"column":126}},{"start":{"line":142,"column":16},"end":{"line":142,"column":66}}],"line":141},"18":{"loc":{"start":{"line":148,"column":28},"end":{"line":148,"column":92}},"type":"cond-expr","locations":[{"start":{"line":148,"column":56},"end":{"line":148,"column":85}},{"start":{"line":148,"column":88},"end":{"line":148,"column":92}}],"line":148},"19":{"loc":{"start":{"line":149,"column":15},"end":{"line":151,"column":109}},"type":"cond-expr","locations":[{"start":{"line":149,"column":47},"end":{"line":149,"column":179}},{"start":{"line":150,"column":12},"end":{"line":151,"column":109}}],"line":149},"20":{"loc":{"start":{"line":150,"column":12},"end":{"line":151,"column":109}},"type":"cond-expr","locations":[{"start":{"line":150,"column":39},"end":{"line":150,"column":169}},{"start":{"line":151,"column":16},"end":{"line":151,"column":109}}],"line":150}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":14,"9":14,"10":14,"11":3,"12":3,"13":3,"14":3,"15":11,"16":11,"17":10,"18":9,"19":1,"20":1,"21":1,"22":1,"23":8,"24":1,"25":7,"26":21,"27":30,"28":21,"29":2,"30":7,"31":7,"32":7,"33":7,"34":7,"35":7,"36":14,"37":14,"38":14,"39":140,"40":70,"41":70,"42":70,"43":14,"44":14,"45":7,"46":0,"47":7,"48":7,"49":7,"50":7,"51":7,"52":14,"53":70,"54":14,"55":70,"56":14,"57":7,"58":7,"59":70,"60":70,"61":70,"62":70,"63":70,"64":70,"65":70,"66":70,"67":1},"f":{"0":2,"1":14,"2":21,"3":30,"4":7,"5":14,"6":140,"7":7,"8":14,"9":70,"10":70,"11":7,"12":7,"13":70,"14":70},"b":{"0":[1,1,1],"1":[0,2],"2":[2,2],"3":[3,11],"4":[3,1],"5":[1,8],"6":[1,0],"7":[1,7],"8":[2,19],"9":[7],"10":[70,70],"11":[140,70],"12":[70,0],"13":[70,70],"14":[14,0],"15":[0,7],"16":[70,0],"17":[0,0],"18":[70,0],"19":[70,0],"20":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/saler/Desktop/asd-graph-renderer/src/parser.ts","sources":["C:/Users/saler/Desktop/asd-graph-renderer/src/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs'\r\nimport {createGraphEdge, createGraphNode, Graph, GraphEdge, GraphNode} from \"./models\";\r\nimport {validateAnswerSetsSchema, validateTemplateSchema} from \"./schema-validators\";\r\nimport assert from \"assert\";\r\n\r\nexport class GraphParser {\r\n    private readonly template: any;\r\n    private readonly answerSets: any[];\r\n    private readonly MANDATORY_NODE_VARIABLE: string[] = [\"label\"];\r\n    private readonly MANDATORY_EDGE_VARIABLE: string[] = [\"from\", \"to\"];\r\n    /**\r\n     * It takes a template object, which is validated with a schema, and an array of answer set.\r\n     */\r\n    private check_variables_name(variables: string[],mandatory_variables: string[]){\r\n        //TODO Remember to make case insensitive\r\n        const check = mandatory_variables.every(value =>{\r\n            return variables.includes(value);\r\n        })\r\n        if(!check)\r\n            throw Error(`Variables provided: \\\"${variables}\\\" must contain \\\"${mandatory_variables}\\\"`)\r\n    }\r\n\r\n    constructor(template: any, answerSets: any[]) {\r\n        if (!validateTemplateSchema(template)) {\r\n            assert(validateTemplateSchema.errors);\r\n            const error = validateTemplateSchema.errors[0];\r\n            const path = error.instancePath || \"template\";\r\n            throw Error(\"Template is not valid: \" + path + \" \" + error.message);\r\n        }\r\n        this.template = template;\r\n        this.check_variables_name(this.template.nodes.atom.variables,this.MANDATORY_NODE_VARIABLE);\r\n        this.check_variables_name(this.template.edge.atom.variables, this.MANDATORY_EDGE_VARIABLE);\r\n\r\n        if (!validateAnswerSetsSchema(answerSets)) {\r\n            assert(validateAnswerSetsSchema.errors);\r\n            const error = validateAnswerSetsSchema.errors[0];\r\n            const path = error.instancePath || \"answer sets\";\r\n            throw Error(\"Answer sets are not valid: \" + path + \" \" + error.message);\r\n        }\r\n        if (!answerSets.length) {\r\n            throw Error(\"Answer set list is empty\");\r\n        }\r\n        this.answerSets = answerSets;\r\n    }\r\n\r\n    /**\r\n     * It takes a JSON object with two properties, nodes and edge, and returns an array of JSON objects\r\n     * with two properties, nodes and edge. The nodes and edge properties are arrays of strings. The\r\n     * strings are atoms. The atoms are extracted from the answer sets of a dlv program. The dlv program is\r\n     * generated from the JSON object\r\n     * @param {any} options - {\r\n     * @param {string|null} [outputFile=null] - the file to write the output to. If null, the output is\r\n     * returned as a string.\r\n     * @returns An array of objects. Each object has two properties: nodes and edge.\r\n     */\r\n    // private oldbuildOutput(options: any, outputFile: string|null = null) {    \r\n    //     const nodes = options.node;\r\n    //     const edge = options.edge;\r\n    //     const node_atom = new RegExp(nodes[0]+'\\(.+\\)'), node_ariety = +nodes[1];\r\n    //     const edge_atom = new RegExp(edge[0]+'\\(.+\\)'), edge_ariety = +edge[1];\r\n    //     let output: any = [];\r\n    //     this.answerSets.forEach( answerSet => {\r\n    //         const n: string[] = [];\r\n    //         const a: string[] = [];\r\n    //         answerSet.as.forEach((atom: string) => {\r\n    //             if(node_atom.test(atom) && atom.split(\",\").length == node_ariety)\r\n    //                 n.push(atom);\r\n    //             else if(edge_atom.test(atom) && atom.split(\",\").length == edge_ariety)\r\n    //                 a.push(atom);\r\n    //         })\r\n    //         if (n.length != 0) {\r\n    //             output.push({\"nodes\": n, \"edge\": a})\r\n    //         }\r\n    //     })\r\n    //     if (outputFile) {\r\n    //         fs.writeFileSync(outputFile, JSON.stringify(output, null, 4));\r\n    //     }\r\n    //     return output\r\n    // }\r\n\r\n    private buildOutput(options: any, outputFile: string|null = null){\r\n        const node_atom = new RegExp(options.nodes.atom.name+'\\(.+\\)'), node_ariety = +options.nodes.atom.variables.length;\r\n        const edge_atom = new RegExp(options.edge.atom.name+'\\(.+\\)'), edge_ariety = +options.edge.atom.variables.length;\r\n        let output: any = [];\r\n        this.answerSets.forEach( answerSet => {\r\n            const n: string[] = [];\r\n            const a: string[] = [];\r\n            answerSet.as.forEach((atom: string) => {\r\n                if(node_atom.test(atom) && atom.split(\",\").length == node_ariety)\r\n                    n.push(atom);\r\n                else if(edge_atom.test(atom) && atom.split(\",\").length == edge_ariety)\r\n                    a.push(atom);\r\n            })\r\n            if (n.length != 0) {\r\n                output.push({\"nodes\": n, \"edge\": a})\r\n            }\r\n        })\r\n        if (outputFile) {\r\n            fs.writeFileSync(outputFile, JSON.stringify(output, null, 4));\r\n        }\r\n        return output\r\n    }\r\n    /**\r\n     * It takes a template, runs it through the ASP solver, and then parses the output into a list of graphs\r\n     * @returns An array of Graphs.\r\n     */\r\n    answerSetsToGraphs(): Graph[] {\r\n        const answerSets = this.buildOutput(this.template);\r\n        const node_variables = this.get_node_variables(this.template.nodes.atom.variables);\r\n        const edge_variables = this.get_edge_variables(this.template.edge.atom.variables);\r\n        return answerSets.map((as:any) => {\r\n            const nodes: GraphNode[] = as.nodes.map((atom:string) => {\r\n                return this.create_node(atom,node_variables);\r\n            });\r\n\r\n            const edges: GraphEdge[] = as.edge.map((atom:string) => {\r\n                return this.create_edge(atom, edge_variables);\r\n            });\r\n\r\n            return <Graph>{\r\n                nodes: nodes,\r\n                edges: edges,\r\n            };\r\n        });\r\n    }\r\n\r\n    private get_node_variables(variables: string[]){\r\n        return {\r\n            name: variables.indexOf('label'),\r\n            color: variables.indexOf('color')\r\n        }\r\n    }\r\n\r\n    private get_edge_variables(variables: string[]){\r\n        return {\r\n            from: variables.indexOf('from'),\r\n            to: variables.indexOf('to'),\r\n            weight: variables.indexOf('weight'),\r\n            color: variables.indexOf('color')\r\n        }\r\n    }\r\n\r\n    private create_node(node: string, variables: any): GraphNode{\r\n        let node_var = node.split(\"(\")[1].split(\")\")[0].split(\",\");\r\n        const node_name = node_var[variables['name']]\r\n\r\n        return \"style\" in this.template.nodes ? createGraphNode({name: node_name, color: this.template.nodes.style.color}):\r\n                        variables['color'] != -1 ? createGraphNode({name: node_name, color:node_var[variables['color']]}):\r\n                                                    createGraphNode({name: node_name});\r\n    }\r\n\r\n    private create_edge(edge: string, variables: any): GraphEdge{   \r\n        let edge_var = edge.split(\"(\")[1].split(\")\")[0].split(\",\");\r\n        const edge_from = edge_var[variables['from']];\r\n        const edge_to = edge_var[variables['to']];\r\n        const edge_weight = variables['weight'] != -1? edge_var[variables['weight']]: null;\r\n        return \"style\" in this.template.edge ? createGraphEdge({from: edge_from, destination: edge_to, weight:edge_weight, color: this.template.edge.style.color}):\r\n                        variables['color'] != -1 ? createGraphEdge({from: edge_from, destination: edge_to, weight:edge_weight, color:edge_var[variables['color']]}):\r\n                                                    createGraphEdge({from: edge_from, destination: edge_to, weight:edge_weight});\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"22cb3c521e2efda6c43f370c931e9ccf9f3b96c3"}}